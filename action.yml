name: Upload to Replay
author: Replay.io
description: Uploads recordings to Replay.io
inputs:
  api-key:
    required: true
    description: "Replay.io API Key"
  filter:
    description: "A JSONata function to pass to `$filter` to select replays to upload"
  public:
    description: "Makes the uploaded replay viewable by everyone"
    default: false
  cli-version:
    description: "Version of @replayio/replay to use"
    default: latest
outputs:
  recordings:
    description: "Array of recordings uploaded"
    value: ${{ steps.upload-recordings.outputs.result }}
  recordings-path:
    description: "Path to file containing array of recordings uploaded"
    value: ${{ steps.upload-recordings.outputs.recordings-path }}

runs:
  using: composite
  steps:
    - name: "Install Replay CLI"
      run: npm i --prefix $GITHUB_ACTION_PATH @replayio/replay@${{ inputs.cli-version }}
      shell: sh
    - name: "Upload Recordings"
      id: "upload-recordings"
      uses: actions/github-script@v6
      with:
        result-encoding: json
        script: |
          const fs = require("fs");
          const path = require("path");

          const gap = process.env.GITHUB_ACTION_PATH;
          const cliPath = '/node_modules/@replayio/replay';
          const cli = require(gap + cliPath);
          const { source } = require(gap + cliPath + "/metadata");
          const upload = require(gap + '/dist/upload.js');
          const buildSourceMetadata = require(gap + '/dist/source.js');
          const ids = await upload({
            cli,
            "api-key": '${{ inputs.api-key || null }}',
            public: ${{ inputs.public || false }},
            filter: '${{ inputs.filter || null }}',
            metadata: await buildSourceMetadata(source, context, github)
          });

          // Write output to a file
          const output = path.join(gap, "recordings.json");
          fs.writeFileSync(output, JSON.stringify(ids));

          core.setOutput('recordings', ids);
          core.setOutput('recordings-path', output);
      env:
        RECORD_REPLAY_API_KEY: ${{ inputs.api-key }}
